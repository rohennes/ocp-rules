/*
    Tengo Language
    Checks that callouts are sequential 
    $ tengo SequentialNumberedCallouts.tengo <asciidoc_file_to_validate>
*/

fmt := import("fmt")
os := import("os")
text := import("text")

input := os.args()
scope := os.read_file(input[2])
matches := []
existingNumbers := []
numInList := false

//trim extra whitespace
scope = text.trim_space(scope)
//add a newline, it might be missing
scope += "\n"

numbered_callout_regex := ".*<(\\d+)>"
listingblock_delim_regex := "^-{4,}$"
found := false
block := false

for line in text.split(scope, "\n") {
  //Check if we're in a code block
  if text.re_match(listingblock_delim_regex, line) {
    if block == false {
      block = true
    } else if block == true {
        block = false
    
        //Find if the found callout numbers in the list are sequential
        for i in existingNumbers{
          for j in existingNumbers{
            numInList = false
            if j == i+1 || j == i-1{
              fmt.println(i,j, "Numbers are in sequence")
              numInList = true
              break
            } 
          }
          if !numInList {
            fmt.println( "This is out of sequence")
            start := text.index(scope, line)
            matches = append(matches, {begin: start, end: start + len(line)})
        }
        
      }
      //Then wipe list until next codeblock is found
      existingNumbers = []
    } 
  }
  
  if text.re_match(numbered_callout_regex, line) && block == true {
    callout := text.re_find("<(\\d+)>", line)
    for key, value in callout {
      //trim angle brackets from string
      trimmed := callout[key][0]["text"]
      trimmed = text.trim_prefix(trimmed, "<")
      trimmed = text.trim_suffix(trimmed, ">")
      //cast string > int
      num := text.atoi(trimmed)     
      
      //Check if number is in list  
      for i in existingNumbers{   
        found = false
        if i == num{
          found = true
          break
          }
      }
      
      //If number not found in the list, add to list 
      if !found {
        existingNumbers = append(existingNumbers, num)  
      } 
    }  
  }  
}


if len(matches) == 0 {
  fmt.println("Callouts are sequential")
} else {
  fmt.println(matches) 
}
